public class ShortPath {
    public static int INF = 10000000;
    public static int g[][] = {
            {0,12,15,INF,INF,INF,INF,INF,INF,INF},
            {12,0,INF,INF,4,10,INF,INF,INF,INF},
            {15,INF,0,21,INF,INF,7,INF,INF,INF},
            {INF,INF,21,0,INF,INF,INF,25,INF,INF},
            {INF,4,INF,INF,0,3,INF,INF,13,INF},
            {INF,10,INF,INF,3,0,10,INF,INF,INF},
            {INF,INF,7,INF,INF,10,0,19,INF,9},
            {INF,INF,INF,25,INF,INF,19,0,INF,5},
            {INF,INF,INF,INF,13,INF,INF,INF,0,15},
            {INF,INF,INF,INF,INF,INF,9,5,15,0}
    };
    public static boolean visited[]= new boolean[10];//방문한 노드
    public static int d[] = {INF,INF,INF,INF,INF,INF,INF,INF,INF,INF};//최단거리 저장
    //가장 최소 거리를 가지는 정점을 반환한다.
    public static int getSmallIndex(){
        int min = Integer.MAX_VALUE;
        int min_Index = -1;
        for(int i =0;i<10;i++){
            if( !visited[i]&& d[i]!=INF){
                if(d[i]<min) {
                    min = d[i];
                    min_Index = i;
                }
            }
        }
        return min_Index;
    }
    //다익스트라를 수행하는 함수
    public static void dijkstra ( int start){
        visited[start]=true;
        d[start]=0;
        for(int i =0; i<10; i++){
            if(!visited[i]){
                d[i]= g[start][i];
            }
        }

        for(int i =0;i<9;i++){
            int current = getSmallIndex();
            visited[current] = true;
            for(int j =0; j<10;j++){
                if(!visited[j]&&g[current][j]!=0){
                    if(d[current]+g[current][j]< d[j]){
                        d[j]=d[current]+g[current][j];
                    }
                }
            }
        }
    }

    public static void main(String[] arg){

        dijkstra(0);
        for(int i =1;i<10;i++){
            System.out.print(d[i]+" ");
        }


    }
}
